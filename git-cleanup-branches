#!/usr/bin/env -S deno run --allow-all

import yargs from "https://deno.land/x/yargs@v17.7.2-deno/deno.ts";

const DEBUG = !!Deno.env.get("DEBUG");
const DRY_RUN = !!Deno.env.get("DRY_RUN");

function tmpNameSync(prefix: string = "tmp"): string {
  const uniqueId = crypto.randomUUID();
  return `${prefix}-${uniqueId}`;
}

function runCommandSync(command: string, args: string[]): string {
  if (DEBUG) {
    console.log(`+ ${command} ${args.join(" ")}`);
  }
  const result = new Deno.Command(command, {
    args: args,
  }).outputSync();

  if (!result.success) {
    const stdout = new TextDecoder().decode(result.stdout);
    if (stdout) {
      console.log(stdout);
    }
    throw new Error(
      `Command failed: ${command} ${args.join(" ")} (exit code: ${result.code})`
    );
  }

  return new TextDecoder().decode(result.stdout);
}

function hasRemoteBranch(
  branch: ParsedRef,
  sortedBranches: SortedBranches,
  remote: string
): boolean {
  const remoteBranches = sortedBranches.remotes[remote] || [];
  return remoteBranches.some(
    (remoteBranch) => remoteBranch.branchName === branch.branchName
  );
}
interface ParsedRef {
  remote?: string;
  ref: string;
  branchName: string;
  isLocal: boolean;
}

interface SortedBranches {
  local: ParsedRef[];
  remotes: Record<string, ParsedRef[]>;
}

interface CandidateState {
  candidateInstructions(): string;
  branchCandidates(): string[];
}

function parseRef(ref: string): ParsedRef | null {
  const remoteMatch = ref.match(/^refs\/remotes\/([^/]+)\/(.+)$/);
  const localMatch = ref.match(/^refs\/heads\/(.+)$/);

  if (remoteMatch) {
    const [, remote, branchName] = remoteMatch;
    return {
      remote,
      ref,
      branchName,
      isLocal: false,
    };
  } else if (localMatch) {
    const [, branchName] = localMatch;
    return {
      ref,
      branchName,
      isLocal: true,
    };
  }
  return null;
}

function sortBranches(branches: string[]): SortedBranches {
  const sorted: SortedBranches = {
    local: [],
    remotes: {},
  };

  for (const branch of branches) {
    const parsed = parseRef(branch);
    if (!parsed) {
      console.log(`I don't know how to delete ${branch}`);
      continue;
    }

    if (parsed.isLocal) {
      sorted.local.push(parsed);
    } else if (parsed.remote) {
      sorted.remotes[parsed.remote] = sorted.remotes[parsed.remote] || [];
      sorted.remotes[parsed.remote].push(parsed);
    }
  }

  return sorted;
}

class BranchNotFound extends Error {}

class ConsiderAll implements CandidateState {
  private branches: string[];

  constructor(branches: string[]) {
    this.branches = branches;
  }

  candidateInstructions(): string {
    return "# The following is a list of all local and remote branches in your repository";
  }

  branchCandidates(): string[] {
    return this.branches;
  }
}

function editBranchList(state: CandidateState): string[] {
  const tempFile = tmpNameSync();
  const lines = [
    state.candidateInstructions(),
    "# To delete the branches, delete them from this list, and then save and quit",
  ];
  const sortedBranches = sortBranches(state.branchCandidates());

  const joined: [string, ParsedRef[]][] = [
    ["local branches", sortedBranches.local],
    ...Object.entries(sortedBranches.remotes),
  ];

  for (const [type, branches] of joined) {
    lines.push("");
    lines.push(`# ${type.toUpperCase()}:`);
    for (const branch of branches) {
      const suffix =
        branch.isLocal && !hasRemoteBranch(branch, sortedBranches, "origin")
          ? " # (no remote)"
          : "";
      lines.push(`${branch.ref}${suffix}`);
    }
  }
  Deno.writeTextFileSync(tempFile, lines.join("\n"));

  new Deno.Command(Deno.env.get("EDITOR") || "vi", {
    args: [tempFile],
    stdin: "inherit",
    stdout: "inherit",
    stderr: "inherit",
  }).outputSync();

  const preserveBranches = Deno.readTextFileSync(tempFile)
    .split("\n")
    .map((line) => line.replace(/#.+$/, "").trim())
    .filter((line) => line.length > 0);

  Deno.removeSync(tempFile);

  const erroneousBranches = preserveBranches.filter(
    (b) => !state.branchCandidates().includes(b)
  );
  if (erroneousBranches.length > 0) {
    console.error(
      "Error! unrecognized branches:\n" +
        erroneousBranches.map((b) => ` - ${b}`).join("\n")
    );
    Deno.exit(1);
  }

  return preserveBranches;
}

function deleteBranches(branchesForDeletion: string[]): void {
  if (branchesForDeletion.length === 0) {
    console.log("No branches to delete.");
    Deno.exit(1);
  }

  console.log(
    "Deleting branches:\n" +
      branchesForDeletion.map((b) => ` - ${b}`).join("\n")
  );

  // are you sure?
  let confirmation: string | undefined = undefined;
  while (confirmation === undefined || !["y", "n"].includes(confirmation)) {
    confirmation = prompt(
      "Are you sure you want to delete these branches? [y/N] "
    )?.toLocaleLowerCase();
  }

  if (confirmation === "n") {
    console.log("Aborting.");
    Deno.exit(0);
  }

  const sortedBranches = sortBranches(branchesForDeletion);
  if (sortedBranches.local.length > 0) {
    const args = [
      "branch",
      "-D",
      ...sortedBranches.local.map((b) => b.branchName),
    ];

    if (DRY_RUN) {
      console.log(`Would run: git ${args.join(" ")}`);
    } else {
      runCommandSync("git", args);
    }
  }
  for (const [remote, branches] of Object.entries(sortedBranches.remotes)) {
    const args = ["push", remote, ...branches.map((b) => `:${b.branchName}`)];
    if (DRY_RUN) {
      console.log(`Would run: git ${args.join(" ")}`);
    } else {
      runCommandSync("git", args);
    }
  }
}

function fetchAndPrune(): void {
  console.log("Fetching and pruning all remotes");
  runCommandSync("git", ["fetch", "--all", "--prune"]);
  console.log("Done");
}

function getBranches(): string[] {
  const output = runCommandSync("git", ["for-each-ref"]);
  return output
    .split("\n")
    .map((line) => {
      const match = line.match(/.+(refs\/(heads|remotes).+$)/);
      return match ? match[1] : null;
    })
    .filter((branch): branch is string => branch !== null);
}

function main(args: string[]) {
  const argv = yargs(args)
    .usage(`Usage: ${Deno.args[0]} [options]`)
    .option("f", {
      alias: "fast",
      type: "boolean",
      description: "Fast cleanup - Skip fetch/prune remotes",
      default: false,
    })
    .parseSync();
  const fast = argv.fast;

  if (!fast) {
    fetchAndPrune();
  }

  const branches = getBranches();
  const state = new ConsiderAll(branches);

  try {
    const preserveBranches = editBranchList(state);
    deleteBranches(
      state.branchCandidates().filter((b) => !preserveBranches.includes(b))
    );
  } catch (e) {
    if (e instanceof BranchNotFound) {
      console.error(e.message);
      Deno.exit(1);
    }
    console.error(e);
    throw e;
  }
}

main(Deno.args);
