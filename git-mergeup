#!/usr/bin/env ruby
def usage(error = nil)
  STDERR.puts "#{error}\n\n" if error

  STDERR.puts <<-EOF
Usage: #{$0}

Ensures that the remote, origin, has changes up through production and
staging branches.

To set the mergeup path:

  git config mergeup.path master,next

Script must be invoked from the base directory of a git repository.

EOF
end

if ARGV[0] == "--help"
  usage
  exit 1
end

class FailedToExecute < RuntimeError; end
def run(cmd)
  puts "Executing: `#{cmd}`"
  system(cmd)
  raise(FailedToExecute, "Failed to execute `#{cmd}`") unless $? == 0
  true
end

git_directory =
  case
  when File.file?(".git")
    File.read(".git").gsub("gitdir: ", "").strip
  when File.directory?(".git")
    ".git"
  else
    STDERR.puts "ERROR: You must run this command from the root directory of a git repository\n\n"
    exit 1
  end

merge_path = %x{git config mergeup.path}.chomp.split(",")

if merge_path.empty?
  STDERR.puts <<-EOF
You must set config variable mergeup.path.
IE:

  git config mergeup.path master,next
EOF
  exit 2
end

current_branch = File.read("#{git_directory}/HEAD").strip.gsub("ref: refs/heads/", "")
puts "current branch is #{current_branch}"

unless %x{git diff}.strip.empty?
  STDERR.puts "You have existing changes. Stash them and rerun."
  exit 1
end

begin
  run("git fetch")
  run("git checkout #{merge_path.first}")
  run("git merge origin/#{merge_path.first}")

  merge_path[1..-1].zip(merge_path[0..-2]) do |merge_to, merge_from|
    run("git checkout #{merge_to}")
    run("git merge origin/#{merge_to}")
    run("git merge #{merge_from}")
  end

  run("git push origin #{merge_path * ' '}")
  run("git checkout #{current_branch}")
rescue FailedToExecute => e
  puts e
  puts "Please resolve the issue and try again"
  exit 1
end
